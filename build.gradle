plugins {
    id 'java'
    id 'org.springframework.boot' version '3.2.0'
    id 'io.spring.dependency-management' version '1.1.7'
    id 'jacoco'
}

group = 'org.cheonyakPlanet'
version = '0.0.1-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

jacoco {
    toolVersion = "0.8.11"
}

configurations {
    all {
        // Android JSON 라이브러리 제외
        exclude group: 'com.vaadin.external.google', module: 'android-json'
    }
}

repositories {
    mavenCentral()
}

processResources {
    from('scripts') {
        into 'scripts'
    }
}

dependencies {
    // Spring Boot starters
    implementation 'org.springframework.boot:spring-boot-starter-data-jdbc'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
    implementation 'org.springframework.boot:spring-boot-starter-web-services'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-websocket'

    // web client
    implementation 'org.springframework.boot:spring-boot-starter-webflux'
    implementation group: 'org.json', name: 'json', version: '20210307'

    // Thymeleaf extras
    implementation 'org.thymeleaf.extras:thymeleaf-extras-springsecurity6'

    // Logging (Logback)
    implementation 'ch.qos.logback:logback-classic'

    // JWT
    implementation 'io.jsonwebtoken:jjwt-api:0.11.5'
    runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.11.5'
    runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.11.5'

    // OpenAPI (Swagger)
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.5.0'

    // MySQL
    runtimeOnly 'com.mysql:mysql-connector-j'

    // Lombok
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'

    // monitoring
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'io.micrometer:micrometer-registry-prometheus'

    // Testing
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.security:spring-security-test'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
    testRuntimeOnly 'com.h2database:h2'

    // JavaMailSender
    implementation 'org.springframework.boot:spring-boot-starter-mail'

    implementation 'org.springframework.retry:spring-retry'
    implementation 'org.springframework.boot:spring-boot-starter-aop'

    // dotenv support
    implementation 'me.paulschwarz:spring-dotenv:4.0.0'

}

tasks.named('test') {
    useJUnitPlatform()
}

test {
    finalizedBy jacocoTestReport
}

jacocoTestReport {
    dependsOn test
    reports {
        xml.required = true
        html {
            required = true
            outputLocation = file("${buildDir}/reports/jacoco/htmlReport")
        }
        csv.required = true
    }
    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: [
                    // Exclude configuration classes
                    '**/config/**',
                    '**/BeApplication.class',

                    // Exclude DTOs (Data Transfer Objects) - all naming patterns
                    '**/dto/**',
                    '**/*DTO.class',
                    '**/*Dto.class',
                    '**/*Request.class',
                    '**/*Response.class',
                    '**/*RequestDTO.class',
                    '**/*ResponseDTO.class',

                    // Exclude entities and domain objects
                    '**/entity/**',
                    '**/*Entity.class',

                    // Exclude Value Objects
                    '**/vo/**',
                    '**/*VO.class',
                    '**/*Value.class',
                    '**/*ValueObject.class',

                    // Exclude exception classes
                    '**/exception/**',
                    '**/*Exception.class',
                    '**/*Error.class',

                    // Exclude enums and constants
                    '**/UserRoleEnum.class',
                    '**/UserStatusEnum.class',
                    '**/PostCategory.class',
                    '**/ReactionType.class',
                    '**/ErrorCode.class',
                    '**/*Enum.class',
                    '**/*Constants.class',

                    // Exclude Spring Boot infrastructure
                    '**/*Application.class',
                    '**/ServletInitializer.class',

                    // Exclude generated code and builders
                    '**/*Builder.class',
                    '**/*$*.class',

                    // Exclude security and JWT infrastructure (typically not business logic)
                    '**/security/**',
                    '**/jwt/**',

                    // Exclude utility classes that are mostly static methods
                    '**/util/**',
                    '**/*Util.class',
                    '**/*Utils.class',

                    // Exclude Lombok generated methods
                    '**/*$Companion.class',

                    // Exclude test configuration and base classes
                    '**/*TestConfiguration.class',
                    '**/*TestBase.class'
            ])
        }))
    }
    executionData fileTree(project.rootDir.absolutePath).include("**/build/jacoco/*.exec")
}

jacocoTestCoverageVerification {
    dependsOn jacocoTestReport
    violationRules {
        rule {
            limit {
                minimum = 0.70 // 70% minimum coverage for all classes
            }
        }
        rule {
            element = 'CLASS'
            excludes = [
                    // Configuration and infrastructure
                    '*.config.*',
                    '*.*Application',
                    '*.ServletInitializer',

                    // DTOs and data objects
                    '*.dto.*',
                    '*.*DTO',
                    '*.*Dto',
                    '*.*Request',
                    '*.*Response',
                    '*.*RequestDTO',
                    '*.*ResponseDTO',

                    // Entities and domain objects
                    '*.entity.*',
                    '*.*Entity',

                    // Value Objects
                    '*.vo.*',
                    '*.*VO',
                    '*.*Value',
                    '*.*ValueObject',

                    // Exceptions and error handling
                    '*.exception.*',
                    '*.*Exception',
                    '*.*Error',

                    // Enums and constants
                    '*.UserRoleEnum',
                    '*.UserStatusEnum',
                    '*.PostCategory',
                    '*.ReactionType',
                    '*.ErrorCode',
                    '*.*Enum',
                    '*.*Constants',

                    // Infrastructure classes
                    '*.security.*',
                    '*.jwt.*',
                    '*.util.*',
                    '*.*Util',
                    '*.*Utils'
            ]
            limit {
                counter = 'LINE'
                value = 'COVEREDRATIO'
                minimum = 0.80 // 80% for business logic classes (services, controllers, repositories)
            }
        }
        rule {
            element = 'METHOD'
            excludes = [
                    '*.config.*',
                    '*.dto.*',
                    '*.entity.*',
                    '*.exception.*',
                    '*.vo.*',
                    '*.security.*',
                    '*.jwt.*',
                    '*.util.*'
            ]
            limit {
                counter = 'BRANCH'
                value = 'COVEREDRATIO'
                minimum = 0.75 // 75% branch coverage for business logic methods
            }
        }
    }
}

check.dependsOn jacocoTestCoverageVerification

// IntelliJ-style Coverage Report Generation
task intellijStyleCoverageReport {
    dependsOn jacocoTestReport
    doLast {
        copy {
            from "${buildDir}/reports/jacoco/htmlReport"
            into "${projectDir}/htmlReport"
        }

        println "Coverage report generated at: ${projectDir}/htmlReport/index.html"
    }
}

tasks.named('jacocoTestReport') {
    finalizedBy tasks.named('intellijStyleCoverageReport')
}